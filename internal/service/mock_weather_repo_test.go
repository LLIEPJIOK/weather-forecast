// Code generated by mockery v2.45.1. DO NOT EDIT.

package service_test

import (
	context "context"

	models "github.com/LLIEPJIOK/weather-forecast/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockWeatherRepo is an autogenerated mock type for the WeatherRepo type
type MockWeatherRepo struct {
	mock.Mock
}

// AddWeatherObservation provides a mock function with given fields: ctx, ob
func (_m *MockWeatherRepo) AddWeatherObservation(ctx context.Context, ob models.WeatherObservation) (int, error) {
	ret := _m.Called(ctx, ob)

	if len(ret) == 0 {
		panic("no return value specified for AddWeatherObservation")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WeatherObservation) (int, error)); ok {
		return rf(ctx, ob)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WeatherObservation) int); ok {
		r0 = rf(ctx, ob)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WeatherObservation) error); ok {
		r1 = rf(ctx, ob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWeatherObservation provides a mock function with given fields: ctx, id
func (_m *MockWeatherRepo) DeleteWeatherObservation(ctx context.Context, id int) (models.WeatherObservation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWeatherObservation")
	}

	var r0 models.WeatherObservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.WeatherObservation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.WeatherObservation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.WeatherObservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeatherObservation provides a mock function with given fields: ctx, id
func (_m *MockWeatherRepo) GetWeatherObservation(ctx context.Context, id int) (models.WeatherObservation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherObservation")
	}

	var r0 models.WeatherObservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.WeatherObservation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.WeatherObservation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.WeatherObservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWeatherObservations provides a mock function with given fields: ctx
func (_m *MockWeatherRepo) ListWeatherObservations(ctx context.Context) ([]models.WeatherObservation, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListWeatherObservations")
	}

	var r0 []models.WeatherObservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.WeatherObservation, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.WeatherObservation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WeatherObservation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWeatherObservation provides a mock function with given fields: ctx, ob
func (_m *MockWeatherRepo) UpdateWeatherObservation(ctx context.Context, ob models.WeatherObservation) error {
	ret := _m.Called(ctx, ob)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWeatherObservation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WeatherObservation) error); ok {
		r0 = rf(ctx, ob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockWeatherRepo creates a new instance of MockWeatherRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherRepo {
	mock := &MockWeatherRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
