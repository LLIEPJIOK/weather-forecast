// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package postgres

import (
	"context"
	"time"
)

const addWeather = `-- name: AddWeather :one
INSERT INTO weather (timestamp, temperature, humidity, pressure, wind_speed, city, country, weather_status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, timestamp, city, country, temperature, humidity, pressure, wind_speed, weather_status
`

type AddWeatherParams struct {
	Timestamp     time.Time
	Temperature   float64
	Humidity      float64
	Pressure      float64
	WindSpeed     float64
	City          string
	Country       string
	WeatherStatus string
}

func (q *Queries) AddWeather(ctx context.Context, arg AddWeatherParams) (Weather, error) {
	row := q.db.QueryRowContext(ctx, addWeather,
		arg.Timestamp,
		arg.Temperature,
		arg.Humidity,
		arg.Pressure,
		arg.WindSpeed,
		arg.City,
		arg.Country,
		arg.WeatherStatus,
	)
	var i Weather
	err := row.Scan(
		&i.ID,
		&i.Timestamp,
		&i.City,
		&i.Country,
		&i.Temperature,
		&i.Humidity,
		&i.Pressure,
		&i.WindSpeed,
		&i.WeatherStatus,
	)
	return i, err
}

const deleteWeather = `-- name: DeleteWeather :one
DELETE FROM weather
WHERE id = $1
RETURNING id, timestamp, city, country, temperature, humidity, pressure, wind_speed, weather_status
`

func (q *Queries) DeleteWeather(ctx context.Context, id int64) (Weather, error) {
	row := q.db.QueryRowContext(ctx, deleteWeather, id)
	var i Weather
	err := row.Scan(
		&i.ID,
		&i.Timestamp,
		&i.City,
		&i.Country,
		&i.Temperature,
		&i.Humidity,
		&i.Pressure,
		&i.WindSpeed,
		&i.WeatherStatus,
	)
	return i, err
}

const getWeather = `-- name: GetWeather :one
SELECT id, timestamp, city, country, temperature, humidity, pressure, wind_speed, weather_status 
FROM weather
WHERE id = $1
`

func (q *Queries) GetWeather(ctx context.Context, id int64) (Weather, error) {
	row := q.db.QueryRowContext(ctx, getWeather, id)
	var i Weather
	err := row.Scan(
		&i.ID,
		&i.Timestamp,
		&i.City,
		&i.Country,
		&i.Temperature,
		&i.Humidity,
		&i.Pressure,
		&i.WindSpeed,
		&i.WeatherStatus,
	)
	return i, err
}

const listWeathers = `-- name: ListWeathers :many
SELECT id, timestamp, city, country, temperature, humidity, pressure, wind_speed, weather_status 
FROM weather
`

func (q *Queries) ListWeathers(ctx context.Context) ([]Weather, error) {
	rows, err := q.db.QueryContext(ctx, listWeathers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Weather
	for rows.Next() {
		var i Weather
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.City,
			&i.Country,
			&i.Temperature,
			&i.Humidity,
			&i.Pressure,
			&i.WindSpeed,
			&i.WeatherStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWeather = `-- name: UpdateWeather :one
UPDATE weather
SET 
    timestamp = $2,
    temperature = COALESCE(NULLIF($3, 0), temperature),
    humidity = COALESCE(NULLIF($4, 0), humidity),
    pressure = COALESCE(NULLIF($5, 0), pressure),
    wind_speed = COALESCE(NULLIF($6, 0), wind_speed),
    city = COALESCE(NULLIF($7, ''), city),
    country = COALESCE(NULLIF($8, ''), country),
    weather_status = COALESCE(NULLIF($9, ''), weather_status)
WHERE id = $1
RETURNING id, timestamp, city, country, temperature, humidity, pressure, wind_speed, weather_status
`

type UpdateWeatherParams struct {
	ID        int64
	Timestamp time.Time
	Column3   interface{}
	Column4   interface{}
	Column5   interface{}
	Column6   interface{}
	Column7   interface{}
	Column8   interface{}
	Column9   interface{}
}

func (q *Queries) UpdateWeather(ctx context.Context, arg UpdateWeatherParams) (Weather, error) {
	row := q.db.QueryRowContext(ctx, updateWeather,
		arg.ID,
		arg.Timestamp,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.Column9,
	)
	var i Weather
	err := row.Scan(
		&i.ID,
		&i.Timestamp,
		&i.City,
		&i.Country,
		&i.Temperature,
		&i.Humidity,
		&i.Pressure,
		&i.WindSpeed,
		&i.WeatherStatus,
	)
	return i, err
}
