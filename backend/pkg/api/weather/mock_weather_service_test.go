// Code generated by mockery v2.45.1. DO NOT EDIT.

package weather_test

import (
	context "context"

	models "github.com/LLIEPJIOK/weather-forecast/backend/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockWeatherService is an autogenerated mock type for the WeatherService type
type MockWeatherService struct {
	mock.Mock
}

// AddWeather provides a mock function with given fields: ctx, ob
func (_m *MockWeatherService) AddWeather(ctx context.Context, ob *models.Weather) (int, error) {
	ret := _m.Called(ctx, ob)

	if len(ret) == 0 {
		panic("no return value specified for AddWeather")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Weather) (int, error)); ok {
		return rf(ctx, ob)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Weather) int); ok {
		r0 = rf(ctx, ob)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Weather) error); ok {
		r1 = rf(ctx, ob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWeather provides a mock function with given fields: ctx, id
func (_m *MockWeatherService) DeleteWeather(ctx context.Context, id int) (*models.Weather, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWeather")
	}

	var r0 *models.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Weather, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Weather); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Weather)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeather provides a mock function with given fields: ctx, id
func (_m *MockWeatherService) GetWeather(ctx context.Context, id int) (*models.Weather, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 *models.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Weather, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Weather); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Weather)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWeathers provides a mock function with given fields: ctx
func (_m *MockWeatherService) ListWeathers(ctx context.Context) ([]*models.Weather, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListWeathers")
	}

	var r0 []*models.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Weather, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Weather); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Weather)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWeather provides a mock function with given fields: ctx, ob
func (_m *MockWeatherService) UpdateWeather(ctx context.Context, ob *models.Weather) error {
	ret := _m.Called(ctx, ob)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWeather")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Weather) error); ok {
		r0 = rf(ctx, ob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockWeatherService creates a new instance of MockWeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherService {
	mock := &MockWeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
